openapi: 3.0.4
info:
  title: Task Management API
  version: 1.0.0
  description: |
    This API provides endpoints for managing users, teams, projects, and tasks.
  contact:
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: /
paths:
  /login:
    post:
      summary: User login
      description: Authenticate a user and return a JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "secure_password123"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6ImFiYzEyMy00NTY3LTg5MGEtYmNkZWYxMjM0NTY3IiwiZXhwIjoxNjE3MTkwMjMzfQ.JLg-ZI1tQ0dKbW-jfPj7qdOrj5RwU6Xp7s9Qg94U"
                user_id: "abc123-4567-890a-bcdef1234567"
                username: "john_doe"
                _links:
                  self: 
                    href: "/login"
                  user_profile:
                    href: "/users/abc123-4567-890a-bcdef1234567"
                  tasks:
                    href: "/tasks"
                  teams:
                    href: "/teams"
                  test:
                    href: "/test"
                  projects:
                    href: "/projects"
        '400':
          description: Bad request (missing fields)
          content:
            application/json:
              example:
                error: "'Missing Field' is required"
        '401':
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              example:
                error: "Invalid email or password"

  /test:
    get:
      summary: Test endpoint
      description: Test endpoint to check JWT authentication and caching functionality.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful authentication test
          content:
            application/json:
              example:
                message: "Hello john_doe, you are authenticated!"
                user_id: "abc123-4567-890a-bcdef1234567"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '422':
          description: Verification Failed (Wrong Authentication Key)
          content:
            application/json:
              example:
                msg: "Signature verification failed"

  /users/:
    post:
      summary: Create a new user
      description: Create a new user with the provided details.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
            example:
              username: "test_user"
              email: "user@example.com"
              password: "secure_password123"
              role: "member"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                _links:
                  collection:
                    href: /users/
                    method: GET
                    title: All users
                  create:
                    href: /users/
                    method: POST
                    schema:
                      additionalProperties: false
                      properties:
                        email:
                          format: email
                          maxLength: 100
                          type: string
                        full_name:
                          maxLength: 100
                          type: string
                        password:
                          maxLength: 100
                          minLength: 8
                          type: string
                        role:
                          enum:
                            - admin
                            - member
                          type: string
                        username:
                          maxLength: 50
                          minLength: 3
                          type: string
                      required:
                        - username
                        - email
                        - password
                      type: object
                  create_user:
                    encoding: application/json
                    href: /users/
                    method: POST
                    title: Create new user
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                message: Operation completed
        '400':
          description: Bad request (duplicate email or username)
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: /users/
                    method: GET
                    title: All users
                  create:
                    href: /users/
                    method: POST
                    schema:
                      additionalProperties: false
                      properties:
                        email:
                          format: email
                          maxLength: 100
                          type: string
                        full_name:
                          maxLength: 100
                          type: string
                        password:
                          maxLength: 100
                          minLength: 8
                          type: string
                        role:
                          enum:
                            - admin
                            - member
                          type: string
                        username:
                          maxLength: 50
                          minLength: 3
                          type: string
                      required:
                        - username
                        - email
                        - password
                      type: object
                  create_user:
                    encoding: application/json
                    href: /users/
                    method: POST
                    title: Create new user
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                error: Email/Username already exists

    get:
      summary: Get all users
      description: Retrieve a list of all users.
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: /users/
                    method: GET
                    title: All users
                  create:
                    href: /users/
                    method: POST
                    schema:
                      additionalProperties: false
                      properties:
                        email:
                          format: email
                          maxLength: 100
                          type: string
                        full_name:
                          maxLength: 100
                          type: string
                        password:
                          maxLength: 100
                          minLength: 8
                          type: string
                        role:
                          enum:
                            - admin
                            - member
                          type: string
                        username:
                          maxLength: 50
                          minLength: 3
                          type: string
                      required:
                        - username
                        - email
                        - password
                      type: object
                  create_user:
                    encoding: application/json
                    href: /users/
                    method: POST
                    title: Create new user
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                users:
                  - _links:
                      self: /users/abc123-4567-890a-bcdef1234567
                    created_at: "2025-05-10T10:00:00.000000"
                    email: jane.doe@example.com
                    last_login: null
                    role: member
                    user_id: abc123-4567-890a-bcdef1234567
                    username: jane_doe
                  - _links:
                      self: /users/def456-7890-1234-bcde4567890f
                    created_at: "2025-05-11T12:30:00.000000"
                    email: john.smith@example.com
                    last_login: null
                    role: admin
                    user_id: def456-7890-1234-bcde4567890f
                    username: john_smith
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                error: "Unauthorized"
                message: "Missing authorization token"

  /users/{user_id}:
    get:
      summary: Get user details
      description: Retrieve details of a specific user.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "abc123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: User details
          content:
            application/json:
              example:
                _links:
                  self: /users/abc123-4567-890a-bcdef1234567
                created_at: "2025-05-19T00:06:59.677615"
                email: user@example.com
                last_login: null
                role: member
                user_id: abc123-4567-890a-bcdef1234567
                username: sample_user
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: User not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/users/"
                    method: "GET"
                    title: "All users"
                  create:
                    href: "/users/"
                    method: "POST"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - username
                        - email
                        - password
                      properties:
                        email:
                          type: string
                          format: email
                          maxLength: 100
                        full_name:
                          type: string
                          maxLength: 100
                        password:
                          type: string
                          minLength: 8
                          maxLength: 100
                        role:
                          type: string
                          enum:
                            - admin
                            - member
                        username:
                          type: string
                          minLength: 3
                          maxLength: 50
                  create_user:
                    encoding: application/json
                    href: "/users/"
                    method: "POST"
                    title: "Create new user"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "User not found"

    put:
      summary: Update user details
      description: Update details of a specific user.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "abc123-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
            example:
              username: "john_doe_updated"
              email: "john_updated@example.com"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              example:
                _links:
                  self: /users/abc123-4567-890a-bcdef1234567
                user_id: abc123-4567-890a-bcdef1234567
                username: johndoe
                email: johndoe@example.com
                role: member
                created_at: "2025-05-10T13:54:30.646888"
                last_login: null
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: "Bad Request"
                message: "Username already exists"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: User not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/users/"
                    method: "GET"
                    title: "All users"
                  create:
                    href: "/users/"
                    method: "POST"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - username
                        - email
                        - password
                      properties:
                        email:
                          type: string
                          format: email
                          maxLength: 100
                        full_name:
                          type: string
                          maxLength: 100
                        password:
                          type: string
                          minLength: 8
                          maxLength: 100
                        role:
                          type: string
                          enum:
                            - admin
                            - member
                        username:
                          type: string
                          minLength: 3
                          maxLength: 50
                  create_user:
                    encoding: application/json
                    href: "/users/"
                    method: "POST"
                    title: "Create new user"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "User not found"
                message: "User with ID 35f84253-c211-4365-a839-fb1da03b3700 not found"

    delete:
      summary: Delete a user
      description: Delete a specific user.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "abc123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: /users/
                    method: GET
                    title: All users
                  create:
                    href: /users/
                    method: POST
                    schema:
                      additionalProperties: false
                      type: object
                      required:
                        - username
                        - email
                        - password
                      properties:
                        email:
                          type: string
                          format: email
                          maxLength: 100
                        full_name:
                          type: string
                          maxLength: 100
                        password:
                          type: string
                          minLength: 8
                          maxLength: 100
                        role:
                          type: string
                          enum:
                            - admin
                            - member
                        username:
                          type: string
                          minLength: 3
                          maxLength: 50
                  create_user:
                    encoding: application/json
                    href: /users/
                    method: POST
                    title: Create new user
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                message: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: User not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/users/"
                    method: "GET"
                    title: "All users"
                  create:
                    href: "/users/"
                    method: "POST"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - username
                        - email
                        - password
                      properties:
                        email:
                          type: string
                          format: email
                          maxLength: 100
                        full_name:
                          type: string
                          maxLength: 100
                        password:
                          type: string
                          minLength: 8
                          maxLength: 100
                        role:
                          type: string
                          enum:
                            - admin
                            - member
                        username:
                          type: string
                          minLength: 3
                          maxLength: 50
                  create_user:
                    encoding: application/json
                    href: "/users/"
                    method: "POST"
                    title: "Create new user"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "User not found"
                message: "User with ID abc123-4567-890a-bcdef1234567 not found"

  /teams/:
    post:
      summary: Create a new team
      description: Create a new team with the provided details.
      tags:
        - Teams
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateRequest'
            example:
              name: QA Team
              description: Tests Frontend
              lead_id: abc123-4567-890a-bcdef1234567
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              example:
                _links:
                  self: /teams/xyz789-4567-890a-bcdef1234567
                  members: /teams/xyz789-4567-890a-bcdef1234567/members
                team_id: xyz789-4567-890a-bcdef1234567
                name: QA Team
                description: Tests Frontend
                lead_id: abc123-4567-890a-bcdef1234567
        '404':
          description: Invalid lead_id - User not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/teams/"
                    method: "GET"
                    title: "All teams"
                  create:
                    href: "/teams/"
                    method: "POST"
                    encoding: "application/json"
                    title: "Create a new team"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - name
                        - lead_id
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                  create_team:
                    href: "/teams/"
                    method: "POST"
                    encoding: "application/json"
                    title: "Create new team"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Invalid lead_id: User not found"
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: "Invalid request data: 'name' is a required property"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

    get:
      summary: Get all teams
      description: Retrieve a list of all teams.
      tags:
        - Teams
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              example:
                - team_id: "xyz789-4567-890a-bcdef1234567"
                  name: "Development Team A"
                  description: "Backend development team"
                  lead_id: "abc123-4567-890a-bcdef1234567"
                  _links:
                    self: "/teams/xyz789-4567-890a-bcdef1234567"
                    members: "/teams/xyz789-4567-890a-bcdef1234567/members"
                - team_id: "uvw456-7890-123b-cdefg4567890"
                  name: "QA Team"
                  description: "Quality Assurance Team"
                  lead_id: "def456-7890-123b-cdefg4567890"
                  _links:
                    self: "/teams/uvw456-7890-123b-cdefg4567890"
                    members: "/teams/uvw456-7890-123b-cdefg4567890/members"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

  /teams/{team_id}:
    get:
      summary: Get team details
      description: Retrieve details of a specific team.
      tags:
        - Teams
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Team details
          content:
            application/json:
              example:
                _links:
                  self: /teams/xyz789-4567-890a-bcdef1234567
                  members: /teams/xyz789-4567-890a-bcdef1234567/members
                team_id: xyz789-4567-890a-bcdef1234567
                name: Development Team A - Updated
                description: Updated backend team
                lead_id: abc123-4567-890a-bcdef1234567
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Team not found
          content:
            application/json:
              example:
                _links:
                  add_member:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/members"
                    method: "POST"
                    title: "Add a member to team"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                        user_id:
                          type: string
                          format: uuid
                  collection:
                    href: "/teams/"
                    method: "GET"
                    title: "All teams"
                  delete:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709"
                    method: "DELETE"
                    title: "Delete team"
                  members:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/members"
                    method: "GET"
                    title: "List team members"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709"
                    method: "GET"
                    title: "Get team details"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  team_projects:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/projects"
                    method: "GET"
                    title: "Get team's projects"
                  team_tasks:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/tasks"
                    method: "GET"
                    title: "Get team's tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  update:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709"
                    method: "PUT"
                    title: "Update team details"
                    schema:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Team not found"

    put:
      summary: Update team details
      description: Update details of a specific team.
      tags:
        - Teams
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdateRequest'
            example:
              name: "Development Team A - Updated"
              description: "Updated backend team"
              lead_id: "def456-7890-123b-cdefg4567890"
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              example:
                _links:
                  self: /teams/xyz789-4567-890a-bcdef1234567
                  members: /teams/xyz789-4567-890a-bcdef1234567/members
                team_id: xyz789-4567-890a-bcdef1234567
                name: Development Team A - Updated
                description: Updated backend team
                lead_id: abc123-4567-890a-bcdef1234567
        '400':
          description: Bad request
          content:
            application/json:
              example:
                _links:
                  add_member:
                    encoding: application/json
                    href: "/teams/abc123-4567-890a-bcdef1234567/members"
                    method: "POST"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum:
                            - lead
                            - developer
                            - tester
                            - designer
                            - product_manager
                    title: "Add a member to team"
                  collection:
                    href: "/teams/"
                    method: "GET"
                    title: "All teams"
                  delete:
                    href: "/teams/abc123-4567-890a-bcdef1234567"
                    method: "DELETE"
                    title: "Delete team"
                  members:
                    href: "/teams/abc123-4567-890a-bcdef1234567/members"
                    method: "GET"
                    title: "List team members"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/abc123-4567-890a-bcdef1234567"
                    method: "GET"
                    title: "Get team details"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  team_projects:
                    href: "/teams/abc123-4567-890a-bcdef1234567/projects"
                    method: "GET"
                    title: "Get team's projects"
                  team_tasks:
                    href: "/teams/abc123-4567-890a-bcdef1234567/tasks"
                    method: "GET"
                    title: "Get team's tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  update:
                    encoding: application/json
                    href: "/teams/abc123-4567-890a-bcdef1234567"
                    method: "PUT"
                    title: "Update team details"
                    schema:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                error: "Invalid lead_id format"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Team not found
          content:
            application/json:
              example:
                _links:
                  add_member:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/members"
                    method: "POST"
                    title: "Add a member to team"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                        user_id:
                          type: string
                          format: uuid
                  collection:
                    href: "/teams/"
                    method: "GET"
                    title: "All teams"
                  delete:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709"
                    method: "DELETE"
                    title: "Delete team"
                  members:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/members"
                    method: "GET"
                    title: "List team members"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709"
                    method: "GET"
                    title: "Get team details"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  team_projects:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/projects"
                    method: "GET"
                    title: "Get team's projects"
                  team_tasks:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709/tasks"
                    method: "GET"
                    title: "Get team's tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  update:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3709"
                    method: "PUT"
                    title: "Update team details"
                    schema:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Team not found"

    delete:
      summary: Delete a team
      description: Delete a specific team.
      tags:
        - Teams
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Team deleted successfully
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: /teams/
                    method: GET
                    title: All teams
                  create:
                    href: /teams/
                    method: POST
                    encoding: application/json
                    title: Create a new team
                    schema:
                      type: object
                      required: [name, lead_id]
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                  create_team:
                    href: /teams/
                    method: POST
                    encoding: application/json
                    title: Create new team
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                message: Team deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Team not found
          content:
            application/json:
              example:
                _links:
                  add_member:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: POST
                    encoding: application/json
                    title: Add a member to team
                    schema:
                      type: object
                      required: [user_id, role]
                      additionalProperties: false
                      properties:
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                        user_id:
                          type: string
                          format: uuid
                  collection:
                    href: /teams/
                    method: GET
                    title: All teams
                  delete:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: DELETE
                    title: Delete team
                  members:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: GET
                    title: List team members
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Get team details
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  team_projects:
                    href: /teams/xyz789-4567-890a-bcdef1234567/projects
                    method: GET
                    title: Get team's projects
                  team_tasks:
                    href: /teams/xyz789-4567-890a-bcdef1234567/tasks
                    method: GET
                    title: Get team's tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  update:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: PUT
                    encoding: application/json
                    title: Update team details
                    schema:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                error: Team not found

  /teams/{team_id}/members:
    post:
      summary: Add a member to a team check
      description: Adds a user to the specified team with a designated role.
      tags:
        - Team Members
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMemberAddRequest'
            example:
              user_id: "abc123-4567-890a-bcdef1234567"
              role: "developer"
      responses:
        '201':
          description: Member added successfully
          content:
            application/json:
              example:
                _links:
                  delete:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: DELETE
                    title: Remove member from team
                  members:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: GET
                    title: List all team members
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: GET
                    title: Get team member details
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Get parent team
                  teams:
                    href: /teams/
                    method: GET
                    title: List all teams
                  update:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: PUT
                    title: Update team member role
                    encoding: application/json
                    schema:
                      type: object
                      required:
                        - user_id
                        - role
                      additionalProperties: false
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum:
                            - lead
                            - developer
                            - tester
                            - designer
                            - product_manager
                  user:
                    href: /users/abc123-4567-890a-bcdef1234567
                    method: GET
                    title: View user profile
                message: Member added successfully
        '400':
          description: Bad request
          content:
            application/json:
              example:
                _links:
                  delete:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: DELETE
                    title: Remove member from team
                  members:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: GET
                    title: List all team members
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: GET
                    title: Get team member details
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Get parent team
                  teams:
                    href: /teams/
                    method: GET
                    title: List all teams
                  update:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: PUT
                    title: Update team member role
                    encoding: application/json
                    schema:
                      type: object
                      required:
                        - user_id
                        - role
                      additionalProperties: false
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum:
                            - lead
                            - developer
                            - tester
                            - designer
                            - product_manager
                  user:
                    href: /users/abc123-4567-890a-bcdef1234567
                    method: GET
                    title: View user profile
                error: User is already a member of this team
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Not found
          content:
            application/json:
              example:
                _links:
                  delete:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/abc123-4567-890a-bcdef1234567"
                    method: "DELETE"
                    title: "Remove member from team"
                  members:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members"
                    method: "GET"
                    title: "List all team members"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/abc123-4567-890a-bcdef1234567"
                    method: "GET"
                    title: "Get team member details"
                  team:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "Get parent team"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "List all teams"
                  update:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/abc123-4567-890a-bcdef1234567"
                    method: "PUT"
                    title: "Update team member role"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                  user:
                    href: "/users/abc123-4567-890a-bcdef1234567"
                    method: "GET"
                    title: "View user profile"
                error: "Team not found"

    get:
      summary: Get team members
      description: Retrieves all members of the specified team.
      tags:
        - Team Members
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
      responses:
        '200':
          description: List of team members
          content:
            application/json:
              example:
                _links:
                  add_member:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: POST
                    title: Add a team member
                    encoding: application/json
                    schema:
                      type: object
                      required:
                        - user_id
                        - role
                      additionalProperties: false
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                  members:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: GET
                    title: List all team members
                  root:
                    href: /
                    method: GET
                    title: API root
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Get parent team
                  teams:
                    href: /teams/
                    method: GET
                    title: List all teams
                team_id: xyz789-4567-890a-bcdef1234567
                members:
                  - user_id: abc123-4567-890a-bcdef1234567
                    role: lead
                    _links:
                      self:
                        href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                        method: GET
                        title: Get team member details
                      delete:
                        href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                        method: DELETE
                        title: Remove member from team
                      update:
                        href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                        method: PUT
                        title: Update team member role
                        encoding: application/json
                        schema:
                          type: object
                          required:
                            - user_id
                            - role
                          additionalProperties: false
                          properties:
                            user_id:
                              type: string
                              format: uuid
                            role:
                              type: string
                              enum: [lead, developer, tester, designer, product_manager]
                      user:
                        href: /users/abc123-4567-890a-bcdef1234567
                        method: GET
                        title: View user profile
                      members:
                        href: /teams/xyz789-4567-890a-bcdef1234567/members
                        method: GET
                        title: List all team members
                      root:
                        href: /
                        method: GET
                        title: API root
                      team:
                        href: /teams/xyz789-4567-890a-bcdef1234567
                        method: GET
                        title: Get parent team
                      teams:
                        href: /teams/
                        method: GET
                        title: List all teams
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Team not found
          content:
            application/json:
              example:
                _links:
                  add_member:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members"
                    method: "POST"
                    title: "Add a member to team"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                        user_id:
                          type: string
                          format: uuid
                  collection:
                    href: "/teams/"
                    method: "GET"
                    title: "All teams"
                  delete:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "DELETE"
                    title: "Delete team"
                  members:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members"
                    method: "GET"
                    title: "List team members"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "Get team details"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  team_projects:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/projects"
                    method: "GET"
                    title: "Get team's projects"
                  team_tasks:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/tasks"
                    method: "GET"
                    title: "Get team's tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  update:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "PUT"
                    title: "Update team details"
                    schema:
                      type: object
                      additionalProperties: false
                      properties:
                        name:
                          type: string
                          minLength: 3
                          maxLength: 100
                        description:
                          type: string
                          maxLength: 500
                        lead_id:
                          type: string
                          format: uuid
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Team not found"
  /teams/{team_id}/members/{user_id}:
    put:
      summary: Update a team member's role
      description: Updates the role of a specific user within the team.
      tags:
        - Team Members
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "abc123-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMemberUpdateRequest'
            example:
              role: "lead"
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              example:
                _links:
                  delete:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: DELETE
                    title: Remove member from team
                  members:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: GET
                    title: List all team members
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: GET
                    title: Get team member details
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Get parent team
                  teams:
                    href: /teams/
                    method: GET
                    title: List all teams
                  update:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members/abc123-4567-890a-bcdef1234567
                    method: PUT
                    title: Update team member role
                    encoding: application/json
                    schema:
                      type: object
                      required:
                        - user_id
                        - role
                      additionalProperties: false
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum:
                            - lead
                            - developer
                            - tester
                            - designer
                            - product_manager
                  user:
                    href: /users/abc123-4567-890a-bcdef1234567
                    method: GET
                    title: View user profile
                message: Member role updated successfully
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: "No input data provided"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Membership not found
          content:
            application/json:
              example:
                _links:
                  delete:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "DELETE"
                    title: "Remove member from team"
                  members:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members"
                    method: "GET"
                    title: "List all team members"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "Get team member details"
                  team:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "Get parent team"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "List all teams"
                  update:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "PUT"
                    title: "Update team member role"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                  user:
                    href: "/users/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "View user profile"
                error: "Team not found"

    delete:
      summary: Remove a member from a team
      description: Removes the specified user from the team.
      tags:
        - Team Members
      security:
        - bearerAuth: []
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "xyz789-4567-890a-bcdef1234567"
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "abc123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Member removed successfully
          content:
            application/json:
              example:
                _links:
                  add_member:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: POST
                    title: Add a team member
                    encoding: application/json
                    schema:
                      type: object
                      required:
                        - user_id
                        - role
                      additionalProperties: false
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum:
                            - lead
                            - developer
                            - tester
                            - designer
                            - product_manager
                  members:
                    href: /teams/xyz789-4567-890a-bcdef1234567/members
                    method: GET
                    title: List all team members
                  root:
                    href: /
                    method: GET
                    title: API root
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Get parent team
                  teams:
                    href: /teams/
                    method: GET
                    title: List all teams
                message: Member removed successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Membership not found
          content:
            application/json:
              example:
                _links:
                  delete:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "DELETE"
                    title: "Remove member from team"
                  members:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members"
                    method: "GET"
                    title: "List all team members"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "Get team member details"
                  team:
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "Get parent team"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "List all teams"
                  update:
                    encoding: application/json
                    href: "/teams/35f84253-c211-4365-a839-fb1da03b3700/members/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "PUT"
                    title: "Update team member role"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - user_id
                        - role
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        role:
                          type: string
                          enum: [lead, developer, tester, designer, product_manager]
                  user:
                    href: "/users/35f84253-c211-4365-a839-fb1da03b3700"
                    method: "GET"
                    title: "View user profile"
                error: "Team not found"

  /projects/:
    post:
      summary: Create a new project
      description: Create a new project with the provided details.
      tags:
        - Projects
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
            example:
              title: "New Web Application"
              description: "Developing a responsive web app"
              team_id: "xyz789-4567-890a-bcdef1234567"
              status: "on_hold"
              priority: 3
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              example:
                _links:
                  self:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: GET
                    title: View this project
                  collection:
                    href: /projects
                    method: GET
                    title: All projects
                  create:
                    href: /projects
                    method: POST
                    title: Create a new project
                  update:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: PUT
                    title: Update this project
                  delete:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: DELETE
                    title: Delete this project
                  tasks:
                    href: /tasks?project_id=proj123-4567-890a-bcdef1234567
                    method: GET
                    title: Tasks in this project
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Team assigned to this project
                  root:
                    href: /
                    method: GET
                    title: API root
                project_id: proj123-4567-890a-bcdef1234567
                title: Testing Web Application
                description: Testing a responsive web app
                status: on_hold
                team_id: xyz789-4567-890a-bcdef1234567
                category_id: null
                deadline: null
        '404':
          description: Invalid input – team not found
          content:
            application/json:
              example:
                _links:
                  create:
                    href: "/projects"
                    method: "POST"
                    title: "Create a new project"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/projects"
                    method: "GET"
                    title: "All projects"
                  tasks:
                    href: "/tasks"
                    method: "GET"
                    title: "All tasks"
                  teams:
                    href: "/teams"
                    method: "GET"
                    title: "All teams"
                  users:
                    href: "/users"
                    method: "GET"
                    title: "All users"
                message: "Error creating project: Team not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

    get:
      summary: Get all projects
      description: Retrieve a list of all projects.
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              example:
                _links:
                  create:
                    href: /projects
                    method: POST
                    title: Create a new project
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /projects
                    method: GET
                    title: All projects
                  tasks:
                    href: /tasks
                    method: GET
                    title: All tasks
                  teams:
                    href: /teams
                    method: GET
                    title: All teams
                  users:
                    href: /users
                    method: GET
                    title: All users
                projects:
                  - _links:
                      self: /projects/proj123-4567-890a-bcdef1234567
                      tasks: /tasks?project_id=proj123-4567-890a-bcdef1234567
                    project_id: proj123-4567-890a-bcdef1234567
                    title: Project Alpha
                    description: Frontend redesign and API integration
                    status: active
                    team_id: xyz789-4567-890a-bcdef1234567
                    category_id: null
                    deadline: null
                  - _links:
                      self: /projects/proj456-4567-890a-bcdef1234567
                      tasks: /tasks?project_id=proj456-4567-890a-bcdef1234567
                    project_id: proj456-4567-890a-bcdef1234567
                    title: Project Beta
                    description: Backend refactor and optimization
                    status: planning
                    team_id: xyz789-4567-890a-bcdef1234567
                    category_id: null
                    deadline: null
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

  /projects/{project_id}:
    get:
      summary: Get project details
      description: Retrieve details of a specific project.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "proj123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Project details
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: /projects
                    method: GET
                    title: All projects
                  create:
                    href: /projects
                    method: POST
                    title: Create a new project
                  delete:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: DELETE
                    title: Delete this project
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: GET
                    title: View this project
                  tasks:
                    href: /tasks?project_id=proj123-4567-890a-bcdef1234567
                    method: GET
                    title: Tasks in this project
                  team:
                    href: /teams/xyz789-4567-890a-bcdef1234567
                    method: GET
                    title: Team assigned to this project
                  update:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: PUT
                    title: Update this project
                project_id: proj123-4567-890a-bcdef1234567
                title: New Web Application
                description: Developing a responsive web application for client X
                status: active
                category_id: null
                deadline: null
                team_id: xyz789-4567-890a-bcdef1234567
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Project not found
          content:
            application/json:
              example:
                _links:
                  create:
                    href: "/projects"
                    method: "POST"
                    title: "Create a new project"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/projects"
                    method: "GET"
                    title: "All projects"
                  tasks:
                    href: "/tasks"
                    method: "GET"
                    title: "All tasks"
                  teams:
                    href: "/teams"
                    method: "GET"
                    title: "All teams"
                  users:
                    href: "/users"
                    method: "GET"
                    title: "All users"
                error: "Not Found"
                message: "Error retrieving project: Project with ID abc123-4567-890a-bcdef1234567 not found"


    put:
      summary: Update project details
      description: Update details of a specific project.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "proj123-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
            example:
              title: "Updated Web Application"
              description: "Enhanced web app features"
      responses:
        '201':
          description: Project updated successfully
          content:
            application/json:
              example:
                _links:
                  self:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: GET
                    title: View this project
                  collection:
                    href: /projects
                    method: GET
                    title: All projects
                  create:
                    href: /projects
                    method: POST
                    title: Create a new project
                  update:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: PUT
                    title: Update this project
                  delete:
                    href: /projects/proj123-4567-890a-bcdef1234567
                    method: DELETE
                    title: Delete this project
                  tasks:
                    href: /tasks?project_id=proj123-4567-890a-bcdef1234567
                    method: GET
                    title: Tasks in this project
                  root:
                    href: /
                    method: GET
                    title: API root
                project_id: proj123-4567-890a-bcdef1234567
                title: Updated Web Application
                description: Enhanced web app features
                status: active
                team_id: null
                category_id: null
                deadline: null
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: "Bad Request"
                message: "Invalid team_id"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Project not found
          content:
            application/json:
              example:
                _links:
                  create:
                    href: "/projects"
                    method: "POST"
                    title: "Create a new project"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/projects"
                    method: "GET"
                    title: "All projects"
                  tasks:
                    href: "/tasks"
                    method: "GET"
                    title: "All tasks"
                  teams:
                    href: "/teams"
                    method: "GET"
                    title: "All teams"
                  users:
                    href: "/users"
                    method: "GET"
                    title: "All users"
                message: "Error retrieving project: Project with ID abc123-4567-890a-bcdef1234567 not found"


    delete:
      summary: Delete a project
      description: Delete a specific project.
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "proj123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              example:
                _links:
                  create:
                    href: /projects
                    method: POST
                    title: Create a new project
                  root:
                    href: /
                    method: GET
                    title: API root
                  self:
                    href: /projects
                    method: GET
                    title: All projects
                  tasks:
                    href: /tasks
                    method: GET
                    title: All tasks
                  teams:
                    href: /teams
                    method: GET
                    title: All teams
                  users:
                    href: /users
                    method: GET
                    title: All users
                message: Project deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Project not found
          content:
            application/json:
              example:
                _links:
                  create:
                    href: "/projects"
                    method: "POST"
                    title: "Create a new project"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  self:
                    href: "/projects"
                    method: "GET"
                    title: "All projects"
                  tasks:
                    href: "/tasks"
                    method: "GET"
                    title: "All tasks"
                  teams:
                    href: "/teams"
                    method: "GET"
                    title: "All teams"
                  users:
                    href: "/users"
                    method: "GET"
                    title: "All users"
                message: "Error retrieving project: Project with ID abc123-4567-890a-bcdef1234567 not found"

  /tasks/:
    post:
      summary: Create a new task
      description: Create a new task with the provided details.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
            example:
              title: "Implement Auth System"
              description: "Add JWT authentication"
              project_id: "proj123-4567-890a-bcdef1234567"
              assignee_id: "abc123-4567-890a-bcdef1234567"
              status: "pending"
              priority: 1
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              example:
                _links:
                  self: /tasks/task123-4567-890a-bcdef1234567
                  project: /projects/proj123-4567-890a-bcdef1234567
                task_id: task123-4567-890a-bcdef1234567
                project_id: proj123-4567-890a-bcdef1234567
                assignee_id: abc123-4567-890a-bcdef1234567
                created_by: abc123-4567-890a-bcdef1234567
                updated_by: abc123-4567-890a-bcdef1234567
                title: Implement Auth System
                description: Add JWT authentication
                priority: 1
                status: pending
                deadline: null
        '400':
          description: Bad request
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/tasks/"
                    method: "GET"
                    title: "All tasks"
                  create:
                    href: "/tasks/"
                    method: "POST"
                    schema:
                      type: object
                      additionalProperties: false
                      required:
                        - title
                        - status
                        - priority
                        - project_id
                      properties:
                        assignee_id:
                          type: string
                          format: uuid
                        description:
                          type: string
                          maxLength: 500
                        due_date:
                          type: string
                          format: date
                        priority:
                          type: integer
                          minimum: 1
                          maximum: 5
                        project_id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum:
                            - pending
                            - in_progress
                            - completed
                        title:
                          type: string
                          minLength: 3
                          maxLength: 100
                  create_task:
                    encoding: application/json
                    href: "/tasks/"
                    method: "POST"
                    title: "Create new task"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Invalid data"
                message: "Invalid project_id: Project not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

    get:
      summary: Get all tasks
      description: Retrieve a list of all tasks.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          example: "proj123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              example:
                - _links:
                    project: /projects/proj123-4567-890a-bcdef1234567
                    self: /tasks/task123-4567-890a-bcdef1234567
                  task_id: task123-4567-890a-bcdef1234567
                  title: Task One
                  description: Design user login interface
                  status: in_progress
                  priority: 2
                  deadline: null
                  assignee_id: abc123-4567-890a-bcdef1234567
                  project_id: proj123-4567-890a-bcdef1234567
                  created_by: abc123-4567-890a-bcdef1234567
                  updated_by: abc123-4567-890a-bcdef1234567
                - _links:
                    project: /projects/proj123-4567-890a-bcdef1234567
                    self: /tasks/task456-4567-890a-bcdef1234567
                  task_id: task456-4567-890a-bcdef1234567
                  title: Task Two
                  description: Setup JWT authentication middleware
                  status: completed
                  priority: 1
                  deadline: null
                  assignee_id: abc123-4567-890a-bcdef1234567
                  project_id: proj123-4567-890a-bcdef1234567
                  created_by: abc123-4567-890a-bcdef1234567
                  updated_by: abc123-4567-890a-bcdef1234567
        400:
          description: Bad request. The provided project ID does not exist.
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/tasks/"
                    method: "GET"
                    title: "All tasks"
                  create:
                    href: "/tasks/"
                    method: "POST"
                    title: "Create new task"
                    schema:
                      additionalProperties: false
                      type: object
                      required:
                        - title
                        - status
                        - priority
                        - project_id
                      properties:
                        assignee_id:
                          type: string
                          format: uuid
                        description:
                          type: string
                          maxLength: 500
                        due_date:
                          type: string
                          format: date
                        priority:
                          type: integer
                          minimum: 1
                          maximum: 5
                        project_id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: [pending, in_progress, completed]
                        title:
                          type: string
                          minLength: 3
                          maxLength: 100
                  create_task:
                    href: "/tasks/"
                    method: "POST"
                    encoding: "application/json"
                    title: "Create new task"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Project with ID 937f9da6-5607-4e7e-875c-2764b72a1542 not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"

  /tasks/{task_id}:
    get:
      summary: Get task details
      description: Retrieve details of a specific task.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "task123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Task details
          content:
            application/json:
              example:
                _links:
                  project: /projects/proj123-4567-890a-bcdef1234567
                  self: /tasks/task123-4567-890a-bcdef1234567
                task_id: task123-4567-890a-bcdef1234567
                title: Implement User Authentication
                description: Add JWT-based authentication to the backend API
                status: completed
                priority: 1
                deadline: null
                assignee_id: abc123-4567-890a-bcdef1234567
                project_id: proj123-4567-890a-bcdef1234567
                created_by: abc123-4567-890a-bcdef1234567
                updated_by: abc123-4567-890a-bcdef1234567
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Task not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/tasks/"
                    method: "GET"
                    title: "All tasks"
                  create:
                    href: "/tasks/"
                    method: "POST"
                    schema:
                      additionalProperties: false
                      type: object
                      required:
                        - title
                        - status
                        - priority
                        - project_id
                      properties:
                        assignee_id:
                          type: string
                          format: uuid
                        description:
                          type: string
                          maxLength: 500
                        due_date:
                          type: string
                          format: date
                        priority:
                          type: integer
                          minimum: 1
                          maximum: 5
                        project_id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: [pending, in_progress, completed]
                        title:
                          type: string
                          minLength: 3
                          maxLength: 100
                  create_task:
                    href: "/tasks/"
                    method: "POST"
                    encoding: "application/json"
                    title: "Create new task"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Task not found"

    put:
      summary: Update task details
      description: Update details of a specific task.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "task123-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
            example:
              status: "in_progress"
              priority: 2
      responses:
        '200':
          description: Task retrieved or updated successfully
          content:
            application/json:
              example:
                _links:
                  project: "/projects/proj123-4567-890a-bcdef1234567"
                  self: "/tasks/task123-4567-890a-bcdef1234567"
                assignee_id: "abc123-4567-890a-bcdef1234567"
                created_by: "abc123-4567-890a-bcdef1234567"
                deadline: null
                description: "Add JWT authentication"
                priority: 2
                project_id: "proj123-4567-890a-bcdef1234567"
                status: "in_progress"
                task_id: "task123-4567-890a-bcdef1234567"
                title: "Implement Auth System"
                updated_by: "abc123-4567-890a-bcdef1234567"
        '400':
          description: Bad request
          content:
            application/json:
              example:
                error: "Bad Request"
                message: "Invalid status"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Task not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/tasks/"
                    method: "GET"
                    title: "All tasks"
                  create:
                    href: "/tasks/"
                    method: "POST"
                    schema:
                      additionalProperties: false
                      type: object
                      required:
                        - title
                        - status
                        - priority
                        - project_id
                      properties:
                        assignee_id:
                          type: string
                          format: uuid
                        description:
                          type: string
                          maxLength: 500
                        due_date:
                          type: string
                          format: date
                        priority:
                          type: integer
                          minimum: 1
                          maximum: 5
                        project_id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: [pending, in_progress, completed]
                        title:
                          type: string
                          minLength: 3
                          maxLength: 100
                  create_task:
                    href: "/tasks/"
                    method: "POST"
                    encoding: "application/json"
                    title: "Create new task"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Task not found"

    delete:
      summary: Delete a task
      description: Delete a specific task.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "task123-4567-890a-bcdef1234567"
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: /tasks/
                    method: GET
                    title: All tasks
                  create:
                    href: /tasks/
                    method: POST
                    schema:
                      type: object
                      required:
                        - title
                        - status
                        - priority
                        - project_id
                      additionalProperties: false
                      properties:
                        assignee_id:
                          type: string
                          format: uuid
                        description:
                          type: string
                          maxLength: 500
                        due_date:
                          type: string
                          format: date
                        priority:
                          type: integer
                          minimum: 1
                          maximum: 5
                        project_id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum:
                            - pending
                            - in_progress
                            - completed
                        title:
                          type: string
                          minLength: 3
                          maxLength: 100
                  create_task:
                    href: /tasks/
                    method: POST
                    title: Create new task
                    encoding: application/json
                  projects:
                    href: /projects/
                    method: GET
                    title: Browse all projects
                  root:
                    href: /
                    method: GET
                    title: API root
                  tasks:
                    href: /tasks/
                    method: GET
                    title: Browse all tasks
                  teams:
                    href: /teams/
                    method: GET
                    title: Browse all teams
                  users:
                    href: /users/
                    method: GET
                    title: Browse all users
                message: Task deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                msg: "Missing Authorization Header"
        '404':
          description: Task not found
          content:
            application/json:
              example:
                _links:
                  collection:
                    href: "/tasks/"
                    method: "GET"
                    title: "All tasks"
                  create:
                    href: "/tasks/"
                    method: "POST"
                    schema:
                      additionalProperties: false
                      type: object
                      required:
                        - title
                        - status
                        - priority
                        - project_id
                      properties:
                        assignee_id:
                          type: string
                          format: uuid
                        description:
                          type: string
                          maxLength: 500
                        due_date:
                          type: string
                          format: date
                        priority:
                          type: integer
                          minimum: 1
                          maximum: 5
                        project_id:
                          type: string
                          format: uuid
                        status:
                          type: string
                          enum: [pending, in_progress, completed]
                        title:
                          type: string
                          minLength: 3
                          maxLength: 100
                  create_task:
                    href: "/tasks/"
                    method: "POST"
                    encoding: "application/json"
                    title: "Create new task"
                  projects:
                    href: "/projects/"
                    method: "GET"
                    title: "Browse all projects"
                  root:
                    href: "/"
                    method: "GET"
                    title: "API root"
                  tasks:
                    href: "/tasks/"
                    method: "GET"
                    title: "Browse all tasks"
                  teams:
                    href: "/teams/"
                    method: "GET"
                    title: "Browse all teams"
                  users:
                    href: "/users/"
                    method: "GET"
                    title: "Browse all users"
                error: "Task not found"

  /categories:
    post:
      summary: Create a new category
      description: Create a new project category with the provided details.
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreateRequest'
            example:
              name: "Web Development"
              description: "Projects related to web application development"
      deprecated: true 
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                category_id: "cat123-4567-890a-bcdef1234567"
                name: "Web Development"
                description: "Projects related to web application development"
        '400':
          description: Bad request (duplicate category name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Bad Request"
                message: "Category name already exists"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get all categories
      description: Retrieve a list of all project categories.
      tags:
        - Categories
      security:
        - bearerAuth: []
      deprecated: true 
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              example:
                - category_id: "cat123-4567-890a-bcdef1234567"
                  name: "Web Development"
                  description: "Projects related to web application development"
                - category_id: "cat456-7890-123b-cdefg4567890"
                  name: "Mobile Development"
                  description: "Projects related to mobile application development"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /categories/{category_id}:
    get:
      summary: Get category details
      description: Retrieve details of a specific project category.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "cat123-4567-890a-bcdef1234567"
      deprecated: true 
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                category_id: "cat123-4567-890a-bcdef1234567"
                name: "Web Development"
                description: "Projects related to web application development"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Not Found"
                message: "Category with ID cat123-4567-890a-bcdef1234567 not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update category details
      description: Update details of a specific project category.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "cat123-4567-890a-bcdef1234567"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdateRequest'
            example:
              name: "Full-Stack Web Development"
              description: "Projects related to full-stack web application development"
      deprecated: true 
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                category_id: "cat123-4567-890a-bcdef1234567"
                name: "Full-Stack Web Development"
                description: "Projects related to full-stack web application development"
        '400':
          description: Bad request (duplicate category name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a category
      description: Delete a specific project category.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "cat123-4567-890a-bcdef1234567"
      deprecated: true 
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Category deleted successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        user_id:
          type: string
          format: uuid
        username:
          type: string
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
            user_profile:
              type: object
              properties:
                href:
                  type: string
            tasks:
              type: object
              properties:
                href:
                  type: string
            teams:
              type: object
              properties:
                href:
                  type: string
            projects:
              type: object
              properties:
                href:
                  type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
      required:
        - error
        - message

    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          default: "member"
      required:
        - username
        - email
        - password

    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string

    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
      required:
        - user_id
        - username
        - email
        - role

    TeamCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        lead_id:
          type: string
          format: uuid
      required:
        - name
        - lead_id

    TeamUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        lead_id:
          type: string
          format: uuid

    Team:
      type: object
      properties:
        team_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        lead_id:
          type: string
          format: uuid
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
            members:
              type: object
              properties:
                href:
                  type: string
      required:
        - team_id
        - name
        - lead_id

    TeamMemberAddRequest:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        role:
          type: string
      required:
        - user_id
        - role

    TeamMemberUpdateRequest:
      type: object
      properties:
        role:
          type: string
      required:
        - role

    TeamMember:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        role:
          type: string
        _links:
          type: object
          properties:
            user:
              type: object
              properties:
                href:
                  type: string
      required:
        - user_id
        - role

    ProjectCreateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        team_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [planning, active, completed, on_hold, cancelled]
        priority:
          type: integer
          minimum: 1
          maximum: 3
      required:
        - title
        - team_id
        - status
        - priority

    ProjectUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        team_id:
          type: string
          format: uuid

    Project:
      type: object
      properties:
        project_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        team_id:
          type: string
          format: uuid
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
            tasks:
              type: object
              properties:
                href:
                  type: string
      required:
        - project_id
        - title
        - team_id

    TaskCreateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        project_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, in_progress, completed]
        priority:
          type: integer
          minimum: 1
          maximum: 3
      required:
        - title
        - project_id
        - assignee_id

    TaskUpdateRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in_progress, completed]
        priority:
          type: integer
          minimum: 1
          maximum: 3

    Task:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        project_id:
          type: string
          format: uuid
        assignee_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, in_progress, completed]
        priority:
          type: integer
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
      required:
        - task_id
        - title
        - project_id
        - assignee_id
        - status

    CategoryCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
    
    CategoryUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    
    Category: